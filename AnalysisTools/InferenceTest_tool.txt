#ifndef INFERENCE_TEST_CXX
#define INFERENCE_TEST_CXX

#include "AnalysisToolBase.h"
#include <vector>
#include <string>
#include <sstream>
#include <cstdlib>
#include <cstdio>
#include <TFile.h>
#include <TTree.h>
#include <unistd.h>
#include <limits.h>
#include <fstream>
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "cetlib_except/exception.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

namespace analysis {

    class InferenceTest : public AnalysisToolBase {
    public:
        explicit InferenceTest(fhicl::ParameterSet const& p);
        virtual ~InferenceTest() = default;

        void configure(const fhicl::ParameterSet& p) override;
        void analyseEvent(art::Event const& e, bool is_data) override;
        void analyseSlice(art::Event const& e, std::vector<common::ProxyPfpElem_t>& pfp_pxy_v, bool _is_data, bool selected) override;
        void setBranches(TTree* _tree) override;
        void resetTTree(TTree* _tree) override;

    private:
        std::vector<float> _inference_scores;
    };

    InferenceTest::InferenceTest(fhicl::ParameterSet const& p) {}

    void InferenceTest::configure(const fhicl::ParameterSet& p) {}

    void InferenceTest::analyseEvent(art::Event const& e, bool is_data) {}

    void InferenceTest::setBranches(TTree* _tree) {
        _tree->Branch("inference_scores", &_inference_scores);
    }

    void InferenceTest::resetTTree(TTree* _tree) {
        _inference_scores.clear();
    }

    void InferenceTest::analyseSlice(art::Event const& e, std::vector<common::ProxyPfpElem_t>& pfp_pxy_v, bool _is_data, bool selected) {
        mf::LogInfo("InferenceTest") << "--- Starting Inference Test Pattern ---";

        std::string scratch_dir = ".";
        const char* scratch_dir_cstr = std::getenv("_CONDOR_SCRATCH_DIR");
        if (scratch_dir_cstr) {
            scratch_dir = std::string(scratch_dir_cstr);
        }
        char scratch_path_buffer[PATH_MAX];
        realpath(scratch_dir.c_str(), scratch_path_buffer);
        std::string absolute_scratch_dir(scratch_path_buffer);
        mf::LogInfo("InferenceTest") << "Using absolute scratch directory: " << absolute_scratch_dir;

        std::string temp_in = absolute_scratch_dir + "/temp_test_in.root";
        std::string temp_out = absolute_scratch_dir + "/temp_test_out.txt"; // Changed to .txt
        std::string script_stdout = absolute_scratch_dir + "/py_script.out";
        std::string script_stderr = absolute_scratch_dir + "/py_script.err";

        std::vector<float> dummy_image_u(512 * 512, 0.1f);
        TFile temp_file(temp_in.c_str(), "RECREATE");
        TTree tree("imagetree", "Images");
        tree.Branch("image_u", &dummy_image_u);
        tree.Fill();
        temp_file.Write();
        temp_file.Close();

        std::string container = "/cvmfs/uboone.opensciencegrid.org/containers/lantern_v2_me_06_03_prod";
        std::string wrapper_script = "run_strangeness_inference.sh";
        std::string weights_file = "binary_classifier_resnet34.pth";
        std::string tree_name = "imagetree";
        std::string branch_name = "image_u";
        char cwd_buffer[PATH_MAX];
        getcwd(cwd_buffer, sizeof(cwd_buffer));
        std::string work_dir(cwd_buffer);

        std::string command = "apptainer exec --no-home --cleanenv "
        "--bind /cvmfs,/pnfs," + absolute_scratch_dir + " " +
            container + " " +
        "/bin/bash " + work_dir + "/" + wrapper_script + " " +
            temp_in + " " +
            temp_out + " " +
            work_dir + "/" + weights_file + " " +
            tree_name + " " +
            branch_name +
        " > " + script_stdout + " 2> " + script_stderr;

        mf::LogInfo("InferenceTest") << "Executing: " << command;
        int code = std::system(command.c_str());

        if (code != 0) {
            std::ifstream error_stream(script_stderr);
            std::string error_message((std::istreambuf_iterator<char>(error_stream)), std::istreambuf_iterator<char>());
            throw art::Exception(art::errors::LogicError)
            << "Test script failed with exit code " << code
            << "\n--- Script stderr ---\n" << error_message << "\n--- End Script stderr ---";
        }

        _inference_scores.clear();
        std::ifstream result_stream(temp_out.c_str());
        if (!result_stream) {
            throw art::Exception(art::errors::LogicError) << "Could not open temporary result file: " << temp_out;
        }
        float score;
        while (result_stream >> score) {
            _inference_scores.push_back(score);
        }

        std::stringstream ss;
        ss << "Inference scores read back (" << _inference_scores.size() << " values): ";
        for (const auto& score : _inference_scores) {
            ss << score << " ";
        }
        mf::LogInfo("InferenceTest") << ss.str();

        remove(temp_in.c_str());
        remove(temp_out.c_str());
        remove(script_stdout.c_str());
        remove(script_stderr.c_str());

        mf::LogInfo("InferenceTest") << "--- Test Pattern Succeeded ---";
    }

DEFINE_ART_CLASS_TOOL(InferenceTest)

} 

#endif